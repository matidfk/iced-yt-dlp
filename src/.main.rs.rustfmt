#![feature(fn_traits)]

// bspc rule -a iced-yt-dlp state=fullscreen
use iced::{
    alignment::Horizontal,
    executor,
    theme::{Button, Custom},
    widget::{button, column, text, text_input, Row},
    Application, Command, Length, Renderer, Theme,
};

fn main() {
    App::run(iced::Settings::default()).unwrap();
}

#[derive(Default)]
struct App {
    download_url: String,
    download_path: String,
    download_type: DownloadType,
}

#[derive(Debug, Clone, Default, PartialEq)]
pub enum DownloadType {
    #[default]
    Video,
    Audio,
}

impl ToString for DownloadType {
    fn to_string(&self) -> String {
        match self {
            // DownloadType::Video => " Video".to_string(),
            // DownloadType::Audio => " Audio".to_string(),
            DownloadType::Video => "Video".to_string(),
            DownloadType::Audio => "Audio".to_string(),
        }
    }
}

#[derive(Debug, Clone)]
pub enum Message {
    DownloadUrlChanged(String),
    DownloadTypeChanged(DownloadType),
    DownloadPathChanged(String),
    StartDownload,
}

impl Application for App {
    type Executor = executor::Default;

    type Message = Message;

    type Theme = Theme;

    type Flags = ();

    fn new(_flags: Self::Flags) -> (Self, iced::Command<Self::Message>) {
        (Self::default(), Command::none())
    }

    fn title(&self) -> String {
        "Iced yt downloader".to_string()
    }

    fn update(&mut self, message: Self::Message) -> iced::Command<Self::Message> {
        match message {
            Message::DownloadUrlChanged(v) => self.download_url = v,
            Message::DownloadTypeChanged(t) => self.download_type = t,
            Message::StartDownload => {
                let output = std::process::Command::new("yt-dlp")
                    .arg(self.download_url.clone())
                    .args(["-P", &self.download_path])
                    .output()
                    .unwrap();
                println!("{:?}", output);
            }
            Message::DownloadPathChanged(v) => self.download_path = v,
        }
        Command::none()
    }

    fn view(&self) -> Element {
        let download_button = button(
            text("START DOWNLOAD")
                .width(Length::Fill)
                .horizontal_alignment(Horizontal::Center),
        )
        .width(Length::Fill)
        .on_press(Message::StartDownload);

        column![
            text_input(
                "Enter YouTube URL",
                &self.download_url,
                Message::DownloadUrlChanged
            ),
            text_input(
                "Download path",
                &self.download_path,
                Message::DownloadPathChanged
            ),
            multi_toggle(
                vec![DownloadType::Audio, DownloadType::Video],
                self.download_type.clone(),
                |t| Message::DownloadTypeChanged(t.clone())
            ),
            download_button
        ]
        .spacing(10)
        .padding(20)
        .width(Length::Fill)
        .into()
    }

    fn theme(&self) -> Self::Theme {
        Self::Theme::Custom(Box::new(Custom::new(iced::theme::Palette { background: (), text: (), primary: (), success: (), danger: () })))
    }
    fn subscription(&self) -> iced::Subscription<Self::Message> {
        iced::Subscription::none()
    }
}
pub type Element<'a> = iced::Element<'a, Message, Renderer>;

pub fn multi_toggle<'a, T: ToString + PartialEq>(
    options: Vec<T>,
    selected: T,
    message: impl Fn(&T) -> Message,
) -> Element<'a> {
    options
        .iter()
        .fold(Row::new(), |row, option| {
            let text = text(option.to_string())
                .horizontal_alignment(Horizontal::Center)
                .width(Length::Fill);

            let button = button(text)
                .style(if *option == selected {
                    Button::Primary
                } else {
                    Button::Secondary
                })
                .width(Length::Fill)
                .on_press(message.call((option,)));

            row.push(button)
        })
        .spacing(0)
        .width(Length::Fill)
        .into()
}
